{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "978586fa-2149-11f0-949b-90e8680fb0a5",
    "deck_config_uuid": "57e10086-2146-11f0-949b-90e8680fb0a5",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "answerAction": 0,
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "57e10086-2146-11f0-949b-90e8680fb0a5",
            "desiredRetention": 0.9,
            "dyn": false,
            "easyDaysPercentages": [
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0,
                1.0
            ],
            "fsrsParams5": [],
            "fsrsWeights": [],
            "ignoreRevlogsBeforeDate": "",
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 5
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "questionAction": 0,
            "reminder": {
                "enabled": true,
                "time": [
                    8,
                    0
                ]
            },
            "replayq": true,
            "rescheduleFsrsCards": false,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 20
            },
            "reviewOrder": 0,
            "secondsToShowAnswer": 0.0,
            "secondsToShowQuestion": 0.0,
            "sm2Retention": 0.9,
            "stopTimerOnAnswer": false,
            "timer": 0,
            "waitForAudio": true,
            "weightSearch": ""
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [
        "_auto-render.js",
        "_highlight.css",
        "_highlight.js",
        "_katex.css",
        "_katex.min.js",
        "_markdown-it-mark.js",
        "_markdown-it.min.js",
        "_mhchem.js",
        "_style.css",
        "_user_style.css"
    ],
    "name": "ftf",
    "newLimit": null,
    "newLimitToday": null,
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "css": "/* To customize styles for this note type, please edit the '_user_style.css'\n * file in your collection media folder.\n * \n * To find it, please refer to: https://docs.ankiweb.net/files.html#file-locations */\n\n@import url(_style.css);\n@import url(_user_style.css);\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": 562287664888119929,
                    "name": "Front",
                    "ord": 0,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "id": -6352188333252181906,
                    "name": "Back",
                    "ord": 1,
                    "plainText": false,
                    "preventDeletion": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false,
                    "tag": null
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "KaTeX and Markdown Basic (Color)",
            "originalStockKind": 1,
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "<div id=\"front\" class=\"field\">\n  <pre>{{Front}}</pre>\n</div>\n\n<hr id=answer>\n\n<div id=\"back\" class=\"field\">\n  <pre>{{Back}}</pre>\n</div>\n\n<!-- Anki-KaTeX-Markdown -->\n\n<script>\n  var fields = [...document.querySelectorAll(\".field\")];\n  var getResources = [\n    getCSS(\"_katex.css\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\"),\n    getCSS(\"_highlight.css\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css\"),\n    getScript(\"_highlight.js\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js\"),\n    getScript(\"_katex.min.js\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\"),\n    getScript(\"_auto-render.js\", \"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/auto-render-cdn.js\"),\n    getScript(\"_markdown-it.min.js\", \"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.0.4/markdown-it.min.js\"),\n    getScript(\"_markdown-it-mark.js\", \"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/_markdown-it-mark.js\")\n  ];\n  Promise.all(getResources).then(() => getScript(\"_mhchem.js\", \"https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/contrib/mhchem.min.js\")).then(render).catch(show);\n\n\n  function getScript(path, altURL) {\n    return new Promise((resolve, reject) => {\n      let script = document.createElement(\"script\");\n      script.onload = resolve;\n      script.onerror = function () {\n        let script_online = document.createElement(\"script\");\n        script_online.onload = resolve;\n        script_online.onerror = reject;\n        script_online.src = altURL;\n        document.head.appendChild(script_online);\n      };\n      script.src = path;\n      document.head.appendChild(script);\n    });\n  }\n\n  function getCSS(path, altURL) {\n    return new Promise((resolve, reject) => {\n      var css = document.createElement(\"link\");\n      css.setAttribute(\"rel\", \"stylesheet\");\n      css.type = \"text/css\";\n      css.onload = resolve;\n      css.onerror = function () {\n        var css_online = document.createElement(\"link\");\n        css_online.setAttribute(\"rel\", \"stylesheet\");\n        css_online.type = \"text/css\";\n        css_online.onload = resolve;\n        css_online.onerror = reject;\n        css_online.href = altURL;\n        document.head.appendChild(css_online);\n      };\n      css.href = path;\n      document.head.appendChild(css);\n    });\n  }\n\n  function render() {\n    fields.forEach((element) => {\n      renderMath(element.id);\n      markdown(element.id);\n    });\n    show();\n  }\n\n  function show() {\n    fields.forEach((element) => {\n      document.getElementById(element.id).style.visibility = \"visible\";\n    });\n  }\n\n  function renderMath(ID) {\n    let text = document.getElementById(ID).innerHTML;\n    text = replaceInString(text);\n    text = text.replaceAll(\"\\\\$\", \"‚õ≥\");\n    text = text.replaceAll(\"\\\\:\", \"üâê\");\n    document.getElementById(ID).innerHTML = text;\n    renderMathInElement(document.getElementById(ID), {\n      delimiters: [\n        { left: \"$$\", right: \"$$\", display: true },\n        { left: \"$\", right: \"$\", display: false },\n      ],\n      throwOnError: false,\n    });\n  }\n\n  function markdown(ID) {\n    let md = new markdownit({\n      typographer: true, html: true, highlight: function (str, lang) {\n        if (lang && hljs.getLanguage(lang)) {\n          try {\n            return hljs.highlight(str, { language: lang }).value;\n          } catch (__) { }\n        }\n\n        return \"\"; // use external default escaping\n      },\n    }).use(markdownItMark);\n    let text = replaceHTMLElementsInString(document.getElementById(ID).innerHTML);\n    text = md.render(text);\n    text = restoreHTMLElementsInString(text);\n    text = text.replaceAll(\"‚õ≥\", \"$\");\n    text = text.replaceAll(\"üâê\", \":\");\n    document.getElementById(ID).innerHTML = text.replace(/&lt;\\/span&gt;/gi, \"\\\\\");\n  }\n  function replaceInString(str) {\n    str = str.replace(/<[\\/]?pre[^>]*>/gi, \"\");\n    str = str.replace(/<br\\s*[\\/]?[^>]*>/gi, \"\\n\");\n    str = str.replace(/<div[^>]*>/gi, \"\\n\");\n    // Thanks Graham A!\n    str = str.replace(/<[\\/]?span[^>]*>/gi, \"\");\n    str = str.replace(/<\\/div[^>]*>/g, \"\\n\");\n    return replaceHTMLElementsInString(str);\n  }\n\n  replacementElements = [\n    { from: \"\\\\<\", to: \"‚ûø\", is_plaintext: true },\n    { from: \"\\\\>\", to: \"‚û∞\", is_plaintext: true },\n    { from: \"&amp;\", to: \"&\" },\n    { from: \"&nbsp;\", to: \" \" },\n    { from: \"&tab;\", to: \"\t\" },\n  ];\n\n  restoreElements = [\n    { from: \"‚ûø\", to: \"<\", is_plaintext: true },\n    { from: \"‚û∞\", to: \">\", is_plaintext: true },\n    { from: \"&amp;\", to: \"&\", is_plaintext: true },\n    { from: \"&amp;lt;\", to: \"&lt;\", is_plaintext: true },\n    { from: \"&amp;gt;\", to: \"&gt;\", is_plaintext: true },\n  ];\n\n  function replaceHTMLElementsInString(str) {\n    for (let i = 0; i < replacementElements.length; i++) {\n      if (replacementElements[i].is_plaintext) {\n        str = str.replaceAll(replacementElements[i].from, replacementElements[i].to);\n      } else {\n        str = str.replace(new RegExp(replacementElements[i].from, \"gi\"), replacementElements[i].to);\n      }\n    }\n    return str;\n  }\n\n  function restoreHTMLElementsInString(str) {\n    for (let i = 0; i < restoreElements.length; i++) {\n      str = str.replace(new RegExp(restoreElements[i].from, \"gi\"), restoreElements[i].to);\n    }\n    return str;\n  }\n</script>\n",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "id": 4656602492711896623,
                    "name": "KaTeX and Markdown Basic (Color)",
                    "ord": 0,
                    "qfmt": "<div id=\"front\" class=\"field\">\n  <pre>{{Front}}</pre>\n</div>\n\n<!-- Anki-KaTeX-Markdown -->\n\n<script>\n  var fields = [...document.querySelectorAll(\".field\")];\n  var getResources = [\n    getCSS(\"_katex.css\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\"),\n    getCSS(\"_highlight.css\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css\"),\n    getScript(\"_highlight.js\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js\"),\n    getScript(\"_katex.min.js\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\"),\n    getScript(\"_auto-render.js\", \"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/auto-render-cdn.js\"),\n    getScript(\"_markdown-it.min.js\", \"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.0.4/markdown-it.min.js\"),\n    getScript(\"_markdown-it-mark.js\", \"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/_markdown-it-mark.js\")\n  ];\n  Promise.all(getResources).then(() => getScript(\"_mhchem.js\", \"https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/contrib/mhchem.min.js\")).then(render).catch(show);\n\n\n  function getScript(path, altURL) {\n    return new Promise((resolve, reject) => {\n      let script = document.createElement(\"script\");\n      script.onload = resolve;\n      script.onerror = function () {\n        let script_online = document.createElement(\"script\");\n        script_online.onload = resolve;\n        script_online.onerror = reject;\n        script_online.src = altURL;\n        document.head.appendChild(script_online);\n      };\n      script.src = path;\n      document.head.appendChild(script);\n    });\n  }\n\n  function getCSS(path, altURL) {\n    return new Promise((resolve, reject) => {\n      var css = document.createElement(\"link\");\n      css.setAttribute(\"rel\", \"stylesheet\");\n      css.type = \"text/css\";\n      css.onload = resolve;\n      css.onerror = function () {\n        var css_online = document.createElement(\"link\");\n        css_online.setAttribute(\"rel\", \"stylesheet\");\n        css_online.type = \"text/css\";\n        css_online.onload = resolve;\n        css_online.onerror = reject;\n        css_online.href = altURL;\n        document.head.appendChild(css_online);\n      };\n      css.href = path;\n      document.head.appendChild(css);\n    });\n  }\n\n  function render() {\n    fields.forEach((element) => {\n      renderMath(element.id);\n      markdown(element.id);\n    });\n    show();\n  }\n\n  function show() {\n    fields.forEach((element) => {\n      document.getElementById(element.id).style.visibility = \"visible\";\n    });\n  }\n\n  function renderMath(ID) {\n    let text = document.getElementById(ID).innerHTML;\n    text = replaceInString(text);\n    text = text.replaceAll(\"\\\\$\", \"‚õ≥\");\n    text = text.replaceAll(\"\\\\:\", \"üâê\");\n    document.getElementById(ID).innerHTML = text;\n    renderMathInElement(document.getElementById(ID), {\n      delimiters: [\n        { left: \"$$\", right: \"$$\", display: true },\n        { left: \"$\", right: \"$\", display: false },\n      ],\n      throwOnError: false,\n    });\n  }\n\n  function markdown(ID) {\n    let md = new markdownit({\n      typographer: true, html: true, highlight: function (str, lang) {\n        if (lang && hljs.getLanguage(lang)) {\n          try {\n            return hljs.highlight(str, { language: lang }).value;\n          } catch (__) { }\n        }\n\n        return \"\"; // use external default escaping\n      },\n    }).use(markdownItMark);\n    let text = replaceHTMLElementsInString(document.getElementById(ID).innerHTML);\n    text = md.render(text);\n    text = restoreHTMLElementsInString(text);\n    text = text.replaceAll(\"‚õ≥\", \"$\");\n    text = text.replaceAll(\"üâê\", \":\");\n    document.getElementById(ID).innerHTML = text.replace(/&lt;\\/span&gt;/gi, \"\\\\\");\n  }\n  function replaceInString(str) {\n    str = str.replace(/<[\\/]?pre[^>]*>/gi, \"\");\n    str = str.replace(/<br\\s*[\\/]?[^>]*>/gi, \"\\n\");\n    str = str.replace(/<div[^>]*>/gi, \"\\n\");\n    // Thanks Graham A!\n    str = str.replace(/<[\\/]?span[^>]*>/gi, \"\");\n    str = str.replace(/<\\/div[^>]*>/g, \"\\n\");\n    return replaceHTMLElementsInString(str);\n  }\n\n  replacementElements = [\n    { from: \"\\\\<\", to: \"‚ûø\", is_plaintext: true },\n    { from: \"\\\\>\", to: \"‚û∞\", is_plaintext: true },\n    { from: \"&amp;\", to: \"&\" },\n    { from: \"&nbsp;\", to: \" \" },\n    { from: \"&tab;\", to: \"\t\" },\n  ];\n\n  restoreElements = [\n    { from: \"‚ûø\", to: \"<\", is_plaintext: true },\n    { from: \"‚û∞\", to: \">\", is_plaintext: true },\n    { from: \"&amp;\", to: \"&\", is_plaintext: true },\n    { from: \"&amp;lt;\", to: \"&lt;\", is_plaintext: true },\n    { from: \"&amp;gt;\", to: \"&gt;\", is_plaintext: true },\n  ];\n\n  function replaceHTMLElementsInString(str) {\n    for (let i = 0; i < replacementElements.length; i++) {\n      if (replacementElements[i].is_plaintext) {\n        str = str.replaceAll(replacementElements[i].from, replacementElements[i].to);\n      } else {\n        str = str.replace(new RegExp(replacementElements[i].from, \"gi\"), replacementElements[i].to);\n      }\n    }\n    return str;\n  }\n\n  function restoreHTMLElementsInString(str) {\n    for (let i = 0; i < restoreElements.length; i++) {\n      str = str.replace(new RegExp(restoreElements[i].from, \"gi\"), restoreElements[i].to);\n    }\n    return str;\n  }\n</script>\n"
                }
            ],
            "type": 0
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "fields": [
                "**Crystallography**<br />What is a lattice in the context of crystallography?",
                "A lattice is a set of regularly spaced points where each point's position is defined as a linear combination of generating vectors with integer coefficients. In 2D, this is written as:<br><br>$<br>\\vec{R} = n\\vec{a}_1 + m\\vec{a}_2<br>$<br><br>where $n, m \\in \\mathbb{Z}$ and $\\vec{a}_1$, $\\vec{a}_2$ are the generating vectors."
            ],
            "guid": "j%cNM&,$`v",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Crystallography**<br />What is a Bravais lattice and how many types exist in 2D and 3D?",
                "A Bravais lattice is a lattice of points that has translational symmetry and fills space uniformly. There are 5 distinct Bravais lattices in two dimensions and 14 in three dimensions, based on symmetry differences."
            ],
            "guid": "x_.WvQjy>h",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Crystallography**<br />What is a Wigner‚ÄìSeitz cell?",
                "A Wigner‚ÄìSeitz cell is a special type of primitive unit cell defined as the region of space that is closer to a given lattice point than to any other. It uniquely partitions space based on proximity to lattice points."
            ],
            "guid": "g~3[;|!C-G",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Crystallography**<br />What is a basis in crystallography, and how does it relate to a lattice?",
                "A basis is the building block placed on each lattice point to create the actual crystal structure. It can consist of one atom, several atoms, or even complex molecules like proteins. When a basis is associated with every point of a Bravais lattice, the result is a real crystal structure. The combination of lattice and basis determines the full atomic arrangement in the crystal."
            ],
            "guid": "wZLXs($j~H",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Crystallography**<br />Define a primitive unit cell and how it relates to the Bravais lattice.",
                "A primitive unit cell is the smallest volume that, when translated through all the vectors of the Bravais lattice, fills space without overlap or voids. It contains exactly one lattice point."
            ],
            "guid": "uWi)^WafS",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Crystallography**<br />What is the simple cubic (sc) structure and what are its key properties?",
                "The simple cubic (sc) structure places atoms at each corner of a cube. It is the most basic 3D crystal structure but is uncommon in elemental solids due to its low packing efficiency.<br><br>Key properties:<br>- **Atoms per unit cell**: 1 (8 corners √ó $\\frac{1}{8}$ each)<br>- **Coordination number**: 6<br>- **Packing density**: <br>$$<br>\\eta = \\frac{\\pi}{6} \\approx 0.52<br>$$<br>- **Void space**: ~48%<br>- **Examples**: Polonium (rare example)<br><br>This openness makes it less favorable for metals, which tend to prefer more closely packed arrangements."
            ],
            "guid": "L*RY4e.-g&",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Crystallography**<br />What is the body-centered cubic (bcc) structure and what are its key properties?",
                "The body-centered cubic (bcc) structure has atoms at each corner of the cube and one atom in the center.<br><br>Key properties:<br>- **Atoms per unit cell**: 2 (8 corners √ó $\\frac{1}{8}$ + 1 center atom)<br>- **Coordination number**: 8<br>- **Packing density**: <br>$$<br>\\eta = \\frac{\\sqrt{3} \\pi}{8} \\approx 0.68<br>$$<br>- **Void space**: ~32%<br>- **Examples**: Iron (at room temp), Chromium, Tungsten<br><br>It is more densely packed than the simple cubic but less so than fcc. Often forms in metals where directional bonding is not crucial."
            ],
            "guid": "JR0deGl)%x",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Crystallography**<br />What is the face-centered cubic (fcc) structure and what are its key properties?",
                "The face-centered cubic (fcc) structure places atoms at each corner and at the center of each face of the cube.<br><br>Key properties:<br>- **Atoms per unit cell**: 4 (8 corners √ó $\\frac{1}{8}$ + 6 faces √ó $\\frac{1}{2}$)<br>- **Coordination number**: 12<br>- **Packing density**: <br>$$<br>\\eta = \\frac{\\pi}{3\\sqrt{2}} \\approx 0.74<br>$$<br>- **Void space**: ~26%<br>- **Examples**: Aluminum, Copper, Gold, Silver<br><br>It is the most efficient packing for equal-sized spheres in 3D, making it common for ductile, malleable metals."
            ],
            "guid": "cW*dwudGQ.",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Crystallography**<br />What are close-packed structures in metals, and how do hcp and fcc differ?",
                "Close-packed structures are arrangements where atoms (treated as spheres) are packed as densely as possible. In 3D, there are two main types:<br><br>- **Hexagonal Close-Packed (hcp)**: ABABAB... stacking<br>- **Face-Centered Cubic (fcc)**: ABCABCABC... stacking<br><br>Key properties (both fcc and hcp):<br>- **Packing density**: <br>$$<br>\\eta = \\frac{\\pi}{3\\sqrt{2}} \\approx 0.74<br>$$<br>- **Coordination number**: 12 (maximum possible)<br>- **fcc**: 24 elements crystallize in this form<br>- **hcp**: 36 elements crystallize in this form<br><br>Despite their high packing efficiency, not all metals adopt these structures. Reasons include:<br>- **bcc** (less packed) has closer second-nearest neighbors<br>- **Bonding** in transition metals involves localized and directional d-electrons, affecting preferred structures<br>- **Ionic solids** can also be viewed as close-packed, treating ions as hard spheres"
            ],
            "guid": "qRwNMU;IqV",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**X-ray Diffraction**<br />What is the primary method used to determine crystal structures, and why is it important?",
                "The primary method used to determine crystal structures is **X-ray diffraction**. It is essential not only in solid-state physics but also in structural biology (e.g., protein crystallography). It enables scientists to deduce atomic arrangements in crystals by analyzing the diffraction pattern of X-rays interacting with the crystal lattice."
            ],
            "guid": "B-k+hk&g^2",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Bragg Condition**<br />What is the Bragg condition for constructive interference in X-ray diffraction?",
                "The Bragg condition for constructive interference is:<br /><br />$$<br />2d \\sin\\theta = n\\lambda<br />$$<br /><br />Where:<br />- $d$ = spacing between atomic planes<br />- $\\theta$ = angle of incidence (and reflection)<br />- $\\lambda$ = X-ray wavelength<br />- $n$ = integer (order of reflection)<br /><br />This condition ensures the path difference between X-rays reflected from successive planes equals an integer multiple of the wavelength."
            ],
            "guid": "pe9SO5xLO<",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Bragg Reflection**<br />What physical implications arise from the Bragg condition being satisfied?",
                "If the Bragg condition is satisfied, constructive interference occurs for X-rays reflected from many crystal layers, leading to **sharp diffraction peaks**. This is similar to light diffracting through an optical grating. <br /><br />Since $2d \\sin\\theta = n\\lambda$, the condition also limits the **maximum usable wavelength** for resolving crystal structures."
            ],
            "guid": "JeJa!dG/kw",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Lattice Planes**<br />What are lattice planes in a crystal, and why are they important in X-ray diffraction?",
                "**Lattice planes** are imaginary, equally spaced planes that pass through points in a crystal lattice. They represent planes of atoms and are critical in **X-ray diffraction** because X-rays reflect off these planes. The spacing between these planes determines the diffraction angles through **Bragg‚Äôs law**, allowing structural information to be extracted from diffraction patterns."
            ],
            "guid": "tqKB@f4>gi",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Miller Indices**<br />What are Miller indices and what do they represent?",
                "**Miller indices (hkl)** are a set of three integers that describe the orientation of lattice planes in a crystal. They are derived from the **reciprocals of the intercepts** that a plane makes with the crystal axes. Miller indices help label and differentiate lattice planes and are essential in interpreting diffraction patterns."
            ],
            "guid": "wO9G[Kh#S%",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Miller Indices**<br />How do you calculate Miller indices for a crystal plane?",
                "To calculate **Miller indices (hkl)**:<br /><br />1. Determine the intercepts of the plane with the crystallographic axes in terms of lattice constants (e.g., $a$, $b$, $c$).<br />2. Take the **reciprocals** of these intercepts.<br />3. **Clear fractions** by multiplying all reciprocals by the least common multiple.<br />4. Resulting integers are the **Miller indices** $(h, k, l)$.<br /><br />Example:  <br />If a plane intercepts the axes at $(2a, 1b, \\infty)$,  <br />then the reciprocals are $(1/2, 1, 0)$ ‚Üí multiply by 2 ‚Üí Miller indices = $(1, 2, 0)$."
            ],
            "guid": "kCx|vG%AcT",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Reciprocal Lattice**<br />What is the intuitive meaning of the reciprocal lattice?",
                "The **reciprocal lattice** is a conceptual lattice in momentum (or wavevector) space, where each point represents a plane wave that fits the periodicity of the real-space lattice. It is crucial in analyzing wave phenomena like **X-ray diffraction** and **electron scattering**.<br /><br />Intuitively:<br />- Each point in the reciprocal lattice corresponds to a **set of planes** in the real lattice.<br />- The spacing in the reciprocal lattice is **inversely proportional** to the real-space lattice spacing.<br />- It provides a natural framework for understanding **Bragg diffraction**, where the condition for constructive interference corresponds to reciprocal lattice points intersecting a sphere in momentum space (Ewald construction)."
            ],
            "guid": "dk.9})65]b",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**Reciprocal Lattice**<br />What is the mathematical definition of the reciprocal lattice in 3D?",
                "Given a Bravais lattice defined by the real-space vectors $\\vec{a}_1$, $\\vec{a}_2$, and $\\vec{a}_3$, the reciprocal lattice vectors $\\vec{b}_1$, $\\vec{b}_2$, and $\\vec{b}_3$ are defined as:<br /><br />$$<br />\\vec{b}_1 = 2\\pi \\frac{\\vec{a}_2 \\times \\vec{a}_3}{\\vec{a}_1 \\cdot (\\vec{a}_2 \\times \\vec{a}_3)}<br />$$<br /><br />$$<br />\\vec{b}_2 = 2\\pi \\frac{\\vec{a}_3 \\times \\vec{a}_1}{\\vec{a}_1 \\cdot (\\vec{a}_2 \\times \\vec{a}_3)}<br />$$<br /><br />$$<br />\\vec{b}_3 = 2\\pi \\frac{\\vec{a}_1 \\times \\vec{a}_2}{\\vec{a}_1 \\cdot (\\vec{a}_2 \\times \\vec{a}_3)}<br />$$<br /><br />Any point in the reciprocal lattice can be written as:<br />$$<br />\\vec{G} = h\\vec{b}_1 + k\\vec{b}_2 + l\\vec{b}_3<br />$$<br />with integers $h$, $k$, $l$.<br /><br />This framework is essential in describing periodicity in wavevector space and is the basis for interpreting diffraction patterns."
            ],
            "guid": "Q]XPm5YjN.",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "tags"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**X-ray Diffraction**<br />What is the Laue condition in X-ray diffraction, and why is it important?",
                "The **Laue condition** describes the condition for constructive interference in X-ray diffraction. It states that constructive interference occurs when the difference between the incoming and scattered wave vectors equals a **reciprocal lattice vector**.<br /><br />Mathematically, the Laue condition is:<br /><br />$$<br />\\vec{k} - \\vec{k'} = \\vec{G}<br />$$<br /><br />where $\\vec{k}$ is the incoming wave vector, $\\vec{k'}$ is the scattered wave vector, and $\\vec{G}$ is a reciprocal lattice vector.<br /><br />This condition is central to X-ray diffraction because it determines when diffraction spots are observed, which are related to the structure of the crystal."
            ],
            "guid": "MwU&&l1&CO",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "condition",
                "diffraction",
                "Laue",
                "X-ray"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**X-ray Diffraction**<br />What is the phase problem in X-ray diffraction and how is it overcome?",
                "The **phase problem** in X-ray diffraction arises because the measured intensity of diffraction spots gives the magnitude of the Fourier coefficients of the electron density, but **not the phase**. This results in the loss of phase information during the measurement, making it difficult to directly reconstruct the electron density.<br /><br />To overcome this, a structural model is used to calculate the expected intensities, and these are compared to the experimental results. The model can then be refined until the calculated and experimental intensities match, providing a solution to the phase problem."
            ],
            "guid": "k5_:Q$,;NL",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "diffraction",
                "phase",
                "problem",
                "X-ray"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**X-ray Diffraction**<br />How is the diffracted intensity in X-ray diffraction calculated for a crystal?",
                "The diffracted intensity is proportional to the square of the Fourier coefficient of the electron concentration. This can be written as:<br /><br />$$<br />I(\\vec{k'}) \\propto |\\rho(\\vec{G})|^2<br />$$<br /><br />Where $\\rho(\\vec{G})$ is the Fourier coefficient corresponding to the reciprocal lattice vector $\\vec{G}$.<br /><br />The intensity can be computed by summing over all unit cells in the crystal, considering the periodicity of the lattice and the electron concentration. This includes contributions from the atomic form factors, which describe the scattering from individual atoms.<br /><br />This calculation allows the determination of the electron concentration and, ultimately, the crystal structure."
            ],
            "guid": "Q=]nvkp%Dl",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "calculation",
                "diffraction",
                "intensity",
                "X-ray"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "**X-ray Diffraction**<br />What is the **Ewald construction** and how is it used in X-ray diffraction?",
                "The **Ewald construction** is a graphical method used to visualize and understand the diffraction condition in X-ray crystallography. It is based on the idea of the diffraction condition being related to the vector sum of the incident and scattered wave vectors.<br /><br />The key steps in the Ewald construction are:<br /><br />1. Represent the incident X-ray wave vector $\\vec{k}$ and the scattered wave vector $\\vec{k'}$ as vectors in reciprocal space.<br />2. The condition for diffraction is that the difference between these wave vectors must correspond to a reciprocal lattice vector $\\vec{G}$: <br />   $$<br />   \\vec{k} - \\vec{k'} = \\vec{G}<br />   $$ <br />3. The Ewald sphere construction visualizes this condition by drawing a sphere with a radius equal to the magnitude of the incident wave vector ($|\\vec{k}|$). <br />4. Diffraction occurs when the scattered wave vector $\\vec{k'}$ lies on the Ewald sphere, meaning that the difference between $\\vec{k}$ and $\\vec{k'}$ is a reciprocal lattice vector $\\vec{G}$.<br /><br />This graphical representation helps to understand the relationship between the incident and diffracted waves and the reciprocal lattice, providing a clear visualization of diffraction conditions in crystals."
            ],
            "guid": "iHTp{5F8C~",
            "note_model_uuid": "57e13484-2146-11f0-949b-90e8680fb0a5",
            "tags": [
                "construction",
                "diffraction",
                "Ewald",
                "X-ray"
            ]
        }
    ],
    "reviewLimit": null,
    "reviewLimitToday": null
}